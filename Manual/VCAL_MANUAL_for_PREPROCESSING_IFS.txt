This file describes the structure of the preprocessing pipeline for IRDIS, and describes the parameters that can be set in the json file.

************************ PREPROCESSING (IRDIS) ******************************

# Parts of pipeline
to_do = [1,2,3,4,5,6,7,8] # parts of pre-processing to be run. 

    #1. crop odd + bad pix corr
    #   a. with provided mask (static) => iterative because clumps
    #   b. sigma filtering (cosmic rays) => non-iterative
    #2. Recentering
    #3. final crop and master cube
    #4. plots + trim bad frames
    #   a. Plots before rejection
    #   b. Rejection
    #   c. Plots after rejection
    #5. FWHM + unsat flux (PSF)
    #   a. Gaussian
    #   b. Airy
    #6. final OBJ cube and binning (if requested)
    #7. final ADI cubes and PSF frames
    #8. final scale list
overwrite = [1,1,1,1,1,1,1,1]  # list of bools corresponding to parts of pre-processing to be run again even if files already exist. Same order as to_do
debug = True # whether to print more info - useful for debugging
save_space = False # whether to progressively delete intermediate products as new products are calculated (can save space but will make you start all over from the beginning in case of bug)
plot = 0  # whether to plot additional info (evo of: Strehl, cross-corr level, airmass, flux)
nproc = 1  # number of processors to use - default is cpu_count()/2 for efficiency

# OBS
coro = True   # whether the observations were coronagraphic or not
coro_sz = 12  # if coronagraphic, provide radius of the coronagraph in pixels (check header for size in mas and convert)


# Preprocessing options
rec_met = "satspots"     # recentering method. choice among {"gauss_2dfit", "moffat_2dfit", "dft_nn", "satspots", "radon", "speckle"} # either a single string or a list of string to be tested. If not provided will try both gauss_2dfit and dft. Note: "nn" stand for upsampling factor, it should be an integer (recommended: 100)
rec_met_psf = "dft_100"
xy_spots = [[105,169], [171,181], [117,103], [183,115]] # if recentering by satspots, provide here the pixel coordinates of the satellite spots before bad pixel correction in pre-processing. Two possibilities for the format:
a) provide a list of 4 lists (with 2 elements each):  top-left, top-right, bottom-left and bottom-right spots xy coordinates in the first channel's raw images. Position in other channel(s) will be inferred from wavelength scaling. Note: do not do that for IRDIS!
b) provide a list of n_ch lists of 4 lists (e.g. n_ch is 2 for DBI): in that case all the coordinates for each channel are provided. CHECK in "_left" and "_right" calibrated cen cubes!
sigfactor = 5 # Threshold in sigma to be used in the subimages where gaussian/moffat models are fitted to satellite spots to fing their centroid
badfr_crit_names = ['corr','bkg'] # Bad frame criteria to be used for OBJ cubes; choice between{'stat','ell','corr','bkg','shifts'}. See description below. NOTE: For very good AO correction, it seems the algorithm used in badfrellipticity() routine (i.e. 'ell' option) would sometimes fail to detect the star! Too many rings? Only use for mediocre to very bad Strehl.
badfr_crit_names_psf = ['corr'] # Bad frame criteria to be used for PSF cubes; same description as badfr_crit_names.
# stat: rej based on mean counts in either circle or annulus.
	- "mode": area in which stats are calculated, choice between {'annulus', "circle"}. Default: circle (non-coro), annulus (coro)
	- "rad": radius for the considered area in fwhm. If annulus: correspond to the inner radius of the annulus. Default: 2*fwhm (non-coro), coro_sz+1 (coro).
	- "width": width = [int(4*coro_sz), 0]  # width in fwhm (only used if area is an annulus). Default: 2*fwhm.
	- "thr_top": top sigma threshold; a frame is considered bad if mean pixel intensity in area is larger than median+thr_top*sigma(cfr. description of vip_hci.cube_detect_badfr_pxstats). Default: 1.0
	- "thr_low": lower sigma threshold; a frame is considered bad if mean pixel intensity in area is larger than median+thr_top*sigma(cfr. description of vip_hci.cube_detect_badfr_pxstats). Default: 1.0
# ell: rej based on psf ellipticity
	- "roundhi": cfr. description of vip_hci.preproc.cube_detect_badfr_ellipticity(). Default: 0.2
	- "roundlo": cfr. description of vip_hci.preproc.cube_detect_badfr_ellipticity(). Default: -0.2
	- "crop_sz": in fwhm, cfr. description of vip_hci.preproc.cube_detect_badfr_ellipticity(). Default: 10 (for 10*fwhm crop)
# corr: rej based on correlation level with a frame or median frame. Possible dico entries: 
	- "thr": min correlation level with median frame. Notes: supersedes perc if both are provided; use "plot" to check a plot of correlation level for the frames of the cube.
	- "perc": min percentile for bad frames (e.g. if set to 10, the 10% worst frames in the cube will be automatically rejected) . Default: 0
	- "ref": "median" or int (index of ref frame to be used)
	- "crop_sz": in fwhm. Default: 6.
	- "dist": Type of distance/correlation to be used. Cfr. description of vip_hci.preproc.cube_detect_badfr_correlation. Default: "pearson"
	NOTE: if using perc, final number of bad frames can be larger than perc if other criteria are provided.
badfr_crit = [{"thr":0.9,"ref":"median"},{"thr":"2"}] # List of dictionaries indicating thresholds & parameters to be used for each bad frame criterion.
badfr_crit_psf  # Same as badfr_crit but for unsaturated PSF.
badfr_idx = [[5,6,7],None] # Whether to force some frames to be removed (e.g. if impossible to identify with criteria but clear by eye)
max_bpix_nit = 10  # sets the maximum number of iterations on a frame to correct bpix. Can reduce processing time, but may miss bad pixels if set too low

approx_xy_bkg = 0 # can be 0 or a list of 2 floats: (x,y) coords of background star in full ADI frame obtained after rough centering.
snr_thr_bkg = 3. # float corresponding to SNR threshold to select images of the sequence for consideration to compute shifts.
good_cen_idx = 1 # if some CEN cubes are bad (i.e. star not exactly behind coronagraphic mask), this should be the index of a good CEN cube. If not provided, will assume all CEN cubes have the star perfectly behind mask. Will be used for star-BKG radius and differential shifts. Default: None (not provided in .json file)


#******************** PARAMS LIKELY GOOD AS DEFAULT ***************************
instr = 'SPHER' # instrument name in file name
# First run  dfits *.fits |fitsort DET.SEQ1.DIT INS1.FILT.NAME INS1.OPTI2.NAME DPR.TYPE INS4.COMB.ROT
# then adapt below
n_z = lbdas.shape[0]
diam = 8.1
plsc = 0.00746 #arcsec/pixel

# Systematic errors (cfr. Maire et al. 2016)
pup_off = 135.99 #=-0.11deg  ## !!! MANUAL IS WRONG ACCORDING TO ALICE: should be +135.99 (in particular if TN = -1.75)
TN = -1.75 # pm0.08 deg
ifs_off = -100.48              # for ifs data: -100.48 pm 0.13 deg # for IRDIS: 0
scal_x_distort = 1.      # for IFS: 1.0059
scal_y_distort = 1.0062  # for IFS: 1.0011

# preprocessing options
window = [15,None]                                           # size of the window to smooth moving median for px stats
idx_test_cube = 0                                            # if rec_met is list: provide index of test cube (should be the most tricky one) where all methods will be tested => best method should correspond min(stddev of shifts)
idx_test_cube_psf = 0                                        # id as above for psf
cen_box_sz = [31,35,31]                                      # int or list of sizes (in pixels) of the subimage for 2d fit [OBJ,PSF,CEN]
true_ncen = 2                                                # number of points in time to use for interpolation of center location in OBJ cubes based on location inferred in CEN cubes. Min value: 2 (set to 2 even if only 1 CEN cube available). Important: this is not necessarily equal to the number of CEN cubes (e.g. if there are 3 CEN cubes, 2 before the OBJ sequence and 1 after, true_ncen should be set to 2, not 3)
norm_per_s = True                                            # if True, divide all frames by respective dit => have all fluxes in adu/s
template_strehl = ["science_dbi_{}{:.0f}","psf_dbi_{}{:.0f}"]
distort_corr = 1                                             # whether to correct for distortion (anamorphism) or not (following scal_x_distort and scal_y_distort)
final_crop_sz = 361                                          # int or list (if list, cubes of different dims will be saved). NOTE: only last odd dim will be saved using final_cubename . 823 # 361 => 2.25'' radius; but better to keep it as large as possible and only crop before post-processing. Here we just cut the useless edges (100px on each side)
final_crop_sz_psf = 35                                       # int or list (if list, cubes of different dims will be saved). NOTE: only last odd dim will be saved using final_psfname. 51 => 0.25'' radius (~3.5 FWHM)
psf_model = 'gauss'                                          #'airy' #model to be used to measure FWHM and flux. Choice between {'gauss', 'moff', 'airy'}
bin_fac_list = [1]                                           # binning factors for final cube. If the cube is not too large, do not bin.
corono mask. NOTE: this is the index of the original cubes (not images inside the cube), (e.g. since typically there are only 2 CEN cubes, value would either be 0 or 1) 

#SDI
first_good_ch =  params_preproc.get('first_good_ch',0) # first good channel for SDI
last_good_ch =  params_preproc.get('last_good_ch',39) # last good channel for SDI
n_med_sdi = params_preproc.get('n_med_sdi',[1,2,3,4,5]) # number of channels to combine at beginning and end of the IFS channels (starting from first good and ending at last good). Int or list of int. If a list, will try the different values.
 

# output names - optional. NOTE: the files below are only written if at least one odd crop size is provided (i.e. VIP convention). Post-processing will not work optimally otherwise.
use_cen_only = 0                                  # whether to only use CENTER cubes (e.g. if this is meant to be a reference cube for RDI)
final_cubename = "final_cube"                     # can be provided with or without the suffix ".fits"
final_anglename = "final_derot_angles.fits"       # can be provided with or without the suffix ".fits"   
final_psfname = "final_psf"                       # can be provided with or without the suffix ".fits" 
final_fluxname = "final_flux"

# output options
"verbose": 1                                                 # whether to print more info during processing                          